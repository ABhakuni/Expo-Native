{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Animated = require('react-native').Animated;\n\nvar NavigationAbstractPanResponder = require('./NavigationAbstractPanResponder');\n\nvar clamp = require('clamp');\n\nvar ANIMATION_DURATION = 250;\nvar POSITION_THRESHOLD = 1 / 3;\nvar RESPOND_THRESHOLD = 15;\nvar RESPOND_POSITION_MAX_HORIZONTAL = 30;\nvar RESPOND_POSITION_MAX_VERTICAL = null;\nvar DISTANCE_THRESHOLD = 100;\nvar Directions = {\n  'HORIZONTAL': 'horizontal',\n  'VERTICAL': 'vertical'\n};\nvar Actions = {\n  BACK: {\n    type: 'back'\n  }\n};\n\nvar NavigationCardStackPanResponder = function (_NavigationAbstractPa) {\n  _inherits(NavigationCardStackPanResponder, _NavigationAbstractPa);\n\n  var _super = _createSuper(NavigationCardStackPanResponder);\n\n  function NavigationCardStackPanResponder(direction, props) {\n    var _this;\n\n    _classCallCheck(this, NavigationCardStackPanResponder);\n\n    _this = _super.call(this);\n    _this._isResponding = false;\n    _this._isVertical = direction === Directions.VERTICAL;\n    _this._props = props;\n    _this._startValue = 0;\n    return _this;\n  }\n\n  _createClass(NavigationCardStackPanResponder, [{\n    key: \"onMoveShouldSetPanResponder\",\n    value: function onMoveShouldSetPanResponder(event, gesture) {\n      var props = this._props;\n\n      if (props.navigationState.index !== props.scene.index) {\n        return false;\n      }\n\n      var layout = props.layout;\n      var isVertical = this._isVertical;\n      var index = props.navigationState.index;\n      var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n      var currentDragPosition = gesture[isVertical ? 'moveY' : 'moveX'];\n      var maxDragDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      var positionMax = isVertical ? RESPOND_POSITION_MAX_VERTICAL : RESPOND_POSITION_MAX_HORIZONTAL;\n\n      if (positionMax != null && currentDragPosition > positionMax) {\n        return false;\n      }\n\n      return Math.abs(currentDragDistance) > RESPOND_THRESHOLD && maxDragDistance > 0 && index > 0;\n    }\n  }, {\n    key: \"onPanResponderGrant\",\n    value: function onPanResponderGrant() {\n      var _this2 = this;\n\n      this._isResponding = false;\n\n      this._props.position.stopAnimation(function (value) {\n        _this2._isResponding = true;\n        _this2._startValue = value;\n      });\n    }\n  }, {\n    key: \"onPanResponderMove\",\n    value: function onPanResponderMove(event, gesture) {\n      if (!this._isResponding) {\n        return;\n      }\n\n      var props = this._props;\n      var layout = props.layout;\n      var isVertical = this._isVertical;\n      var axis = isVertical ? 'dy' : 'dx';\n      var index = props.navigationState.index;\n      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      var value = clamp(index - 1, this._startValue - gesture[axis] / distance, index);\n      props.position.setValue(value);\n    }\n  }, {\n    key: \"onPanResponderRelease\",\n    value: function onPanResponderRelease(event, gesture) {\n      var _this3 = this;\n\n      if (!this._isResponding) {\n        return;\n      }\n\n      this._isResponding = false;\n      var props = this._props;\n      var isVertical = this._isVertical;\n      var axis = isVertical ? 'dy' : 'dx';\n      var index = props.navigationState.index;\n      var distance = gesture[axis];\n      props.position.stopAnimation(function (value) {\n        _this3._reset();\n\n        if (distance > DISTANCE_THRESHOLD || value <= index - POSITION_THRESHOLD) {\n          props.onNavigate(Actions.BACK);\n        }\n      });\n    }\n  }, {\n    key: \"onPanResponderTerminate\",\n    value: function onPanResponderTerminate() {\n      this._isResponding = false;\n\n      this._reset();\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      var props = this._props;\n      Animated.timing(props.position, {\n        toValue: props.navigationState.index,\n        duration: ANIMATION_DURATION\n      }).start();\n    }\n  }]);\n\n  return NavigationCardStackPanResponder;\n}(NavigationAbstractPanResponder);\n\nfunction createPanHandlers(direction, props) {\n  var responder = new NavigationCardStackPanResponder(direction, props);\n  return responder.panHandlers;\n}\n\nfunction forHorizontal(props) {\n  return createPanHandlers(Directions.HORIZONTAL, props);\n}\n\nfunction forVertical(props) {\n  return createPanHandlers(Directions.VERTICAL, props);\n}\n\nmodule.exports = {\n  ANIMATION_DURATION: ANIMATION_DURATION,\n  DISTANCE_THRESHOLD: DISTANCE_THRESHOLD,\n  POSITION_THRESHOLD: POSITION_THRESHOLD,\n  RESPOND_THRESHOLD: RESPOND_THRESHOLD,\n  Actions: Actions,\n  Directions: Directions,\n  forHorizontal: forHorizontal,\n  forVertical: forVertical\n};","map":{"version":3,"sources":["/Users/apple/Documents/janitri/sampleapp/node_modules/react-native-experimental-navigation/NavigationCardStackPanResponder.js"],"names":["Animated","require","NavigationAbstractPanResponder","clamp","ANIMATION_DURATION","POSITION_THRESHOLD","RESPOND_THRESHOLD","RESPOND_POSITION_MAX_HORIZONTAL","RESPOND_POSITION_MAX_VERTICAL","DISTANCE_THRESHOLD","Directions","Actions","BACK","type","NavigationCardStackPanResponder","direction","props","_isResponding","_isVertical","VERTICAL","_props","_startValue","event","gesture","navigationState","index","scene","layout","isVertical","currentDragDistance","currentDragPosition","maxDragDistance","height","__getValue","width","positionMax","Math","abs","position","stopAnimation","value","axis","distance","setValue","_reset","onNavigate","timing","toValue","duration","start","createPanHandlers","responder","panHandlers","forHorizontal","HORIZONTAL","forVertical","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NavigationCardStackPanResponder\n * @flow\n * @typechecks\n */\n'use strict';\n\nconst Animated = require('react-native').Animated;\nconst NavigationAbstractPanResponder = require('./NavigationAbstractPanResponder');\n\nconst clamp = require('clamp');\n\nimport type {\n  NavigationPanPanHandlers,\n  NavigationSceneRendererProps,\n} from 'NavigationTypeDefinition';\n\n/**\n * The duration of the card animation in milliseconds.\n */\nconst ANIMATION_DURATION = 250;\n\n/**\n * The threshold to invoke the `onNavigate` action.\n * For instance, `1 / 3` means that moving greater than 1 / 3 of the width of\n * the view will navigate.\n */\nconst POSITION_THRESHOLD = 1 / 3;\n\n/**\n * The threshold (in pixels) to start the gesture action.\n */\nconst RESPOND_THRESHOLD = 15;\n\n/**\n * The distance from the edge of the navigator which gesture response can start for.\n * For horizontal scroll views, a distance of 30 from the left of the screen is the\n * standard maximum position to start touch responsiveness.\n */\nconst RESPOND_POSITION_MAX_HORIZONTAL = 30;\nconst RESPOND_POSITION_MAX_VERTICAL = null;\n\n/**\n * The threshold (in pixels) to finish the gesture action.\n */\nconst DISTANCE_THRESHOLD = 100;\n\n/**\n * Primitive gesture directions.\n */\nconst Directions = {\n  'HORIZONTAL': 'horizontal',\n  'VERTICAL': 'vertical',\n};\n\nexport type NavigationGestureDirection =  'horizontal' | 'vertical';\n\n/**\n * Primitive gesture actions.\n */\nconst Actions = {\n  // The gesture to navigate backward.\n  // This is done by swiping from the left to the right or from the top to the\n  // bottom.\n  BACK: {type: 'back'},\n};\n\n/**\n * Pan responder that handles gesture for a card in the cards stack.\n *\n *     +------------+\n *   +-+            |\n * +-+ |            |\n * | | |            |\n * | | |  Focused   |\n * | | |   Card     |\n * | | |            |\n * +-+ |            |\n *   +-+            |\n *     +------------+\n */\nclass NavigationCardStackPanResponder extends NavigationAbstractPanResponder {\n\n  _isResponding: boolean;\n  _isVertical: boolean;\n  _props: NavigationSceneRendererProps;\n  _startValue: number;\n\n  constructor(\n    direction: NavigationGestureDirection,\n    props: NavigationSceneRendererProps,\n  ) {\n    super();\n    this._isResponding = false;\n    this._isVertical = direction === Directions.VERTICAL;\n    this._props = props;\n    this._startValue = 0;\n  }\n\n  onMoveShouldSetPanResponder(event: any, gesture: any): boolean {\n    const props = this._props;\n\n    if (props.navigationState.index !== props.scene.index) {\n      return false;\n    }\n\n    const layout = props.layout;\n    const isVertical = this._isVertical;\n    const index = props.navigationState.index;\n    const currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n    const currentDragPosition = gesture[isVertical ? 'moveY' : 'moveX'];\n    const maxDragDistance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    const positionMax = isVertical ?\n      RESPOND_POSITION_MAX_VERTICAL :\n      RESPOND_POSITION_MAX_HORIZONTAL;\n\n    if (positionMax != null && currentDragPosition > positionMax) {\n      return false;\n    }\n\n    return (\n      Math.abs(currentDragDistance) > RESPOND_THRESHOLD &&\n      maxDragDistance > 0 &&\n      index > 0\n    );\n  }\n\n  onPanResponderGrant(): void {\n    this._isResponding = false;\n    this._props.position.stopAnimation((value: number) => {\n      this._isResponding = true;\n      this._startValue = value;\n    });\n  }\n\n  onPanResponderMove(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    const props = this._props;\n    const layout = props.layout;\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = props.navigationState.index;\n    const distance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    const value = clamp(\n      index - 1,\n      this._startValue - (gesture[axis] / distance),\n      index\n    );\n\n    props.position.setValue(value);\n  }\n\n  onPanResponderRelease(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    this._isResponding = false;\n\n    const props = this._props;\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = props.navigationState.index;\n    const distance = gesture[axis];\n\n    props.position.stopAnimation((value: number) => {\n      this._reset();\n       if (distance > DISTANCE_THRESHOLD  || value <= index - POSITION_THRESHOLD) {\n        props.onNavigate(Actions.BACK);\n      }\n    });\n  }\n\n  onPanResponderTerminate(): void {\n    this._isResponding = false;\n    this._reset();\n  }\n\n  _reset(): void {\n    const props = this._props;\n    Animated.timing(\n      props.position,\n      {\n        toValue: props.navigationState.index,\n        duration: ANIMATION_DURATION,\n      }\n    ).start();\n  }\n}\n\nfunction createPanHandlers(\n  direction: NavigationGestureDirection,\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  const responder = new NavigationCardStackPanResponder(direction, props);\n  return responder.panHandlers;\n}\n\nfunction forHorizontal(\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  return createPanHandlers(Directions.HORIZONTAL, props);\n}\n\nfunction forVertical(\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  return createPanHandlers(Directions.VERTICAL, props);\n}\n\nmodule.exports = {\n  // constants\n  ANIMATION_DURATION,\n  DISTANCE_THRESHOLD,\n  POSITION_THRESHOLD,\n  RESPOND_THRESHOLD,\n\n  // enums\n  Actions,\n  Directions,\n\n  // methods.\n  forHorizontal,\n  forVertical,\n};\n"]},"metadata":{},"sourceType":"script"}