{"ast":null,"code":"'use strict';\n\nfunction NavigationFindReducer(reducers, defaultState) {\n  return function (lastState, action) {\n    for (var i = 0; i < reducers.length; i++) {\n      var reducer = reducers[i];\n      var newState = reducer(lastState, action);\n\n      if (newState !== lastState) {\n        return newState || defaultState;\n      }\n    }\n\n    return lastState || defaultState;\n  };\n}\n\nmodule.exports = NavigationFindReducer;","map":{"version":3,"sources":["/Users/apple/Documents/janitri/sampleapp/node_modules/react-native-experimental-navigation/NavigationFindReducer.js"],"names":["NavigationFindReducer","reducers","defaultState","lastState","action","i","length","reducer","newState","module","exports"],"mappings":"AAWA;;AAaA,SAASA,qBAAT,CACEC,QADF,EAEEC,YAFF,EAGqB;AACnB,SAAO,UAASC,SAAT,EAAsCC,MAAtC,EAAqE;AAC1E,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAIE,OAAO,GAAGN,QAAQ,CAACI,CAAD,CAAtB;AACA,UAAIG,QAAQ,GAAGD,OAAO,CAACJ,SAAD,EAAYC,MAAZ,CAAtB;;AACA,UAAII,QAAQ,KAAKL,SAAjB,EAA4B;AAC1B,eAAOK,QAAQ,IAAIN,YAAnB;AACD;AACF;;AACD,WAAOC,SAAS,IAAID,YAApB;AACD,GATD;AAUD;;AAEDO,MAAM,CAACC,OAAP,GAAiBV,qBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NavigationFindReducer\n * @flow\n */\n'use strict';\n\n/*\n * NavigationFindReducer takes an array of reducers, and returns a reducer that\n * iterates through all of the reducers and the result of the first reducer\n * that modifies the input\n */\n\nimport type {\n  NavigationState,\n  NavigationReducer\n} from 'NavigationTypeDefinition';\n\nfunction NavigationFindReducer(\n  reducers: Array<NavigationReducer>,\n  defaultState: NavigationState,\n): NavigationReducer {\n  return function(lastState: ?NavigationState, action: ?any): NavigationState {\n    for (let i = 0; i < reducers.length; i++) {\n      let reducer = reducers[i];\n      let newState = reducer(lastState, action);\n      if (newState !== lastState) {\n        return newState || defaultState;\n      }\n    }\n    return lastState || defaultState;\n  };\n}\n\nmodule.exports = NavigationFindReducer;\n"]},"metadata":{},"sourceType":"script"}