{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Animated = require('react-native').Animated;\n\nvar NavigationAbstractPanResponder = require('./NavigationAbstractPanResponder');\n\nvar NavigationCardStackPanResponder = require('./NavigationCardStackPanResponder');\n\nvar clamp = require('clamp');\n\nvar ANIMATION_DURATION = NavigationCardStackPanResponder.ANIMATION_DURATION,\n    DISTANCE_THRESHOLD = NavigationCardStackPanResponder.DISTANCE_THRESHOLD,\n    POSITION_THRESHOLD = NavigationCardStackPanResponder.POSITION_THRESHOLD,\n    RESPOND_THRESHOLD = NavigationCardStackPanResponder.RESPOND_THRESHOLD,\n    Directions = NavigationCardStackPanResponder.Directions;\nvar Actions = {\n  JUMP_BACK: {\n    type: 'jump_back'\n  },\n  JUMP_FORWARD: {\n    type: 'jump_forward'\n  }\n};\n\nvar NavigationPagerPanResponder = function (_NavigationAbstractPa) {\n  _inherits(NavigationPagerPanResponder, _NavigationAbstractPa);\n\n  var _super = _createSuper(NavigationPagerPanResponder);\n\n  function NavigationPagerPanResponder(direction, props) {\n    var _this;\n\n    _classCallCheck(this, NavigationPagerPanResponder);\n\n    _this = _super.call(this);\n    _this._isResponding = false;\n    _this._isVertical = direction === Directions.VERTICAL;\n    _this._props = props;\n    _this._startValue = 0;\n    return _this;\n  }\n\n  _createClass(NavigationPagerPanResponder, [{\n    key: \"onMoveShouldSetPanResponder\",\n    value: function onMoveShouldSetPanResponder(event, gesture) {\n      var props = this._props;\n\n      if (props.navigationState.index !== props.scene.index) {\n        return false;\n      }\n\n      var layout = props.layout;\n      var isVertical = this._isVertical;\n      var axis = isVertical ? 'dy' : 'dx';\n      var index = props.navigationState.index;\n      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      return Math.abs(gesture[axis]) > RESPOND_THRESHOLD && distance > 0 && index > 0;\n    }\n  }, {\n    key: \"onPanResponderGrant\",\n    value: function onPanResponderGrant() {\n      var _this2 = this;\n\n      this._isResponding = false;\n\n      this._props.position.stopAnimation(function (value) {\n        _this2._isResponding = true;\n        _this2._startValue = value;\n      });\n    }\n  }, {\n    key: \"onPanResponderMove\",\n    value: function onPanResponderMove(event, gesture) {\n      if (!this._isResponding) {\n        return;\n      }\n\n      var _this$_props = this._props,\n          layout = _this$_props.layout,\n          navigationState = _this$_props.navigationState,\n          position = _this$_props.position,\n          scenes = _this$_props.scenes;\n      var isVertical = this._isVertical;\n      var axis = isVertical ? 'dy' : 'dx';\n      var index = navigationState.index;\n      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      var prevIndex = Math.max(0, index - 1);\n      var nextIndex = Math.min(index + 1, scenes.length - 1);\n      var value = clamp(prevIndex, this._startValue - gesture[axis] / distance, nextIndex);\n      position.setValue(value);\n    }\n  }, {\n    key: \"onPanResponderRelease\",\n    value: function onPanResponderRelease(event, gesture) {\n      var _this3 = this;\n\n      if (!this._isResponding) {\n        return;\n      }\n\n      this._isResponding = false;\n      var _this$_props2 = this._props,\n          navigationState = _this$_props2.navigationState,\n          onNavigate = _this$_props2.onNavigate,\n          position = _this$_props2.position;\n      var isVertical = this._isVertical;\n      var axis = isVertical ? 'dy' : 'dx';\n      var index = navigationState.index;\n      var distance = gesture[axis];\n      position.stopAnimation(function (value) {\n        _this3._reset();\n\n        if (distance > DISTANCE_THRESHOLD || value <= index - POSITION_THRESHOLD) {\n          onNavigate(Actions.JUMP_BACK);\n          return;\n        }\n\n        if (distance < -DISTANCE_THRESHOLD || value >= index + POSITION_THRESHOLD) {\n          onNavigate(Actions.JUMP_FORWARD);\n        }\n      });\n    }\n  }, {\n    key: \"onPanResponderTerminate\",\n    value: function onPanResponderTerminate() {\n      this._isResponding = false;\n\n      this._reset();\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      var props = this._props;\n      Animated.timing(props.position, {\n        toValue: props.navigationState.index,\n        duration: ANIMATION_DURATION\n      }).start();\n    }\n  }]);\n\n  return NavigationPagerPanResponder;\n}(NavigationAbstractPanResponder);\n\nfunction createPanHandlers(direction, props) {\n  var responder = new NavigationPagerPanResponder(direction, props);\n  return responder.panHandlers;\n}\n\nfunction forHorizontal(props) {\n  return createPanHandlers(Directions.HORIZONTAL, props);\n}\n\nmodule.exports = {\n  Actions: Actions,\n  forHorizontal: forHorizontal\n};","map":{"version":3,"sources":["/Users/apple/Documents/janitri/sampleapp/node_modules/react-native-experimental-navigation/NavigationPagerPanResponder.js"],"names":["Animated","require","NavigationAbstractPanResponder","NavigationCardStackPanResponder","clamp","ANIMATION_DURATION","DISTANCE_THRESHOLD","POSITION_THRESHOLD","RESPOND_THRESHOLD","Directions","Actions","JUMP_BACK","type","JUMP_FORWARD","NavigationPagerPanResponder","direction","props","_isResponding","_isVertical","VERTICAL","_props","_startValue","event","gesture","navigationState","index","scene","layout","isVertical","axis","distance","height","__getValue","width","Math","abs","position","stopAnimation","value","scenes","prevIndex","max","nextIndex","min","length","setValue","onNavigate","_reset","timing","toValue","duration","start","createPanHandlers","responder","panHandlers","forHorizontal","HORIZONTAL","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NavigationPagerPanResponder\n * @flow\n * @typechecks\n */\n'use strict';\n\nconst Animated = require('react-native').Animated;\nconst NavigationAbstractPanResponder = require('./NavigationAbstractPanResponder');\nconst NavigationCardStackPanResponder = require('./NavigationCardStackPanResponder');\n\nconst clamp = require('clamp');\n\nimport type {\n  NavigationPanPanHandlers,\n  NavigationSceneRendererProps,\n} from 'NavigationTypeDefinition';\n\nimport type {\n  NavigationGestureDirection,\n} from 'NavigationCardStackPanResponder';\n\n\n\n/**\n * Primitive gesture directions.\n */\nconst {\n  ANIMATION_DURATION,\n  DISTANCE_THRESHOLD,\n  POSITION_THRESHOLD,\n  RESPOND_THRESHOLD,\n  Directions,\n} = NavigationCardStackPanResponder;\n\n/**\n * Primitive gesture actions.\n */\nconst Actions = {\n  JUMP_BACK: {type: 'jump_back'},\n  JUMP_FORWARD: {type: 'jump_forward'},\n};\n\n/**\n * Pan responder that handles gesture for a card in the cards list.\n *\n * +-------------+-------------+-------------+\n * |             |             |             |\n * |             |             |             |\n * |             |             |             |\n * |    Next     |   Focused   |  Previous   |\n * |    Card     |    Card     |    Card     |\n * |             |             |             |\n * |             |             |             |\n * |             |             |             |\n * +-------------+-------------+-------------+\n */\nclass NavigationPagerPanResponder extends NavigationAbstractPanResponder {\n\n  _isResponding: boolean;\n  _isVertical: boolean;\n  _props: NavigationSceneRendererProps;\n  _startValue: number;\n\n  constructor(\n    direction: NavigationGestureDirection,\n    props: NavigationSceneRendererProps,\n  ) {\n    super();\n    this._isResponding = false;\n    this._isVertical = direction === Directions.VERTICAL;\n    this._props = props;\n    this._startValue = 0;\n  }\n\n  onMoveShouldSetPanResponder(event: any, gesture: any): boolean {\n    const props = this._props;\n\n    if (props.navigationState.index !== props.scene.index) {\n      return false;\n    }\n\n    const layout = props.layout;\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = props.navigationState.index;\n    const distance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    return (\n      Math.abs(gesture[axis]) > RESPOND_THRESHOLD &&\n      distance > 0 &&\n      index > 0\n    );\n  }\n\n  onPanResponderGrant(): void {\n    this._isResponding = false;\n    this._props.position.stopAnimation((value: number) => {\n      this._isResponding = true;\n      this._startValue = value;\n    });\n  }\n\n  onPanResponderMove(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    const {\n      layout,\n      navigationState,\n      position,\n      scenes,\n    } = this._props;\n\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = navigationState.index;\n    const distance = isVertical ?\n      layout.height.__getValue() :\n      layout.width.__getValue();\n\n    const prevIndex = Math.max(\n      0,\n      index - 1,\n    );\n\n    const nextIndex = Math.min(\n      index + 1,\n      scenes.length - 1,\n    );\n\n    const value = clamp(\n      prevIndex,\n      this._startValue - (gesture[axis] / distance),\n      nextIndex,\n    );\n\n    position.setValue(value);\n  }\n\n  onPanResponderRelease(event: any, gesture: any): void {\n    if (!this._isResponding) {\n      return;\n    }\n\n    this._isResponding = false;\n\n    const {\n      navigationState,\n      onNavigate,\n      position,\n    } = this._props;\n\n    const isVertical = this._isVertical;\n    const axis = isVertical ? 'dy' : 'dx';\n    const index = navigationState.index;\n    const distance = gesture[axis];\n\n    position.stopAnimation((value: number) => {\n      this._reset();\n      if (\n        distance > DISTANCE_THRESHOLD  ||\n        value <= index - POSITION_THRESHOLD\n      ) {\n        onNavigate(Actions.JUMP_BACK);\n        return;\n      }\n\n      if (\n        distance < -DISTANCE_THRESHOLD ||\n        value >= index  + POSITION_THRESHOLD\n      ) {\n        onNavigate(Actions.JUMP_FORWARD);\n      }\n    });\n  }\n\n  onPanResponderTerminate(): void {\n    this._isResponding = false;\n    this._reset();\n  }\n\n  _reset(): void {\n    const props = this._props;\n    Animated.timing(\n      props.position,\n      {\n        toValue: props.navigationState.index,\n        duration: ANIMATION_DURATION,\n      }\n    ).start();\n  }\n}\n\nfunction createPanHandlers(\n  direction: NavigationGestureDirection,\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  const responder = new NavigationPagerPanResponder(direction, props);\n  return responder.panHandlers;\n}\n\nfunction forHorizontal(\n  props: NavigationSceneRendererProps,\n): NavigationPanPanHandlers {\n  return createPanHandlers(Directions.HORIZONTAL, props);\n}\n\nmodule.exports = {\n  Actions,\n  forHorizontal,\n};\n"]},"metadata":{},"sourceType":"script"}