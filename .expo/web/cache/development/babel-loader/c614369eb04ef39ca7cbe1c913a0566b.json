{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeExperimentalNavigation = _interopRequireDefault(require(\"react-native-experimental-navigation\"));\n\nvar _reactAddonsPureRenderMixin = _interopRequireDefault(require(\"react-addons-pure-render-mixin\"));\n\nvar _TabBar = _interopRequireDefault(require(\"./TabBar\"));\n\nvar _NavBar = _interopRequireDefault(require(\"./NavBar\"));\n\nvar _Actions = _interopRequireDefault(require(\"./Actions\"));\n\nvar _Util = require(\"./Util\");\n\nvar _jsxFileName = \"/Users/apple/Documents/janitri/sampleapp/node_modules/react-native-router-flux/src/DefaultRenderer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar SCREEN_WIDTH = _reactNative.Dimensions.get('window').width;\n\nvar NavigationAnimatedView = _reactNativeExperimentalNavigation.default.AnimatedView,\n    NavigationCard = _reactNativeExperimentalNavigation.default.Card;\nvar NavigationCardStackPanResponder = NavigationCard.CardStackPanResponder,\n    NavigationCardStackStyleInterpolator = NavigationCard.CardStackStyleInterpolator;\n\nvar styles = _reactNative.StyleSheet.create({\n  animatedView: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  },\n  sceneStyle: {\n    flex: 1\n  }\n});\n\nfunction fadeInScene(props) {\n  var position = props.position,\n      scene = props.scene;\n  var index = scene.index;\n  var inputRange = [index - 1, index, index + 1];\n  var opacity = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [0, 1, 0.3]\n  });\n  var scale = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [1, 1, 0.95]\n  });\n  var translateY = 0;\n  var translateX = 0;\n  return {\n    opacity: opacity,\n    transform: [{\n      scale: scale\n    }, {\n      translateX: translateX\n    }, {\n      translateY: translateY\n    }]\n  };\n}\n\nfunction leftToRight(props) {\n  var position = props.position,\n      scene = props.scene;\n  var index = scene.index;\n  var inputRange = [index - 1, index, index + 1];\n  var translateX = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [-SCREEN_WIDTH, 0, 0]\n  });\n  return {\n    transform: [{\n      translateX: translateX\n    }]\n  };\n}\n\nvar DefaultRenderer = function (_Component) {\n  (0, _inherits2.default)(DefaultRenderer, _Component);\n\n  var _super = _createSuper(DefaultRenderer);\n\n  (0, _createClass2.default)(DefaultRenderer, null, [{\n    key: \"getPanHandlers\",\n    value: function getPanHandlers(direction, props) {\n      return direction === 'vertical' ? NavigationCardStackPanResponder.forVertical(props) : NavigationCardStackPanResponder.forHorizontal(props);\n    }\n  }, {\n    key: \"dispatchFocusAction\",\n    value: function dispatchFocusAction(_ref) {\n      var navigationState = _ref.navigationState;\n\n      if (!navigationState || navigationState.component || navigationState.tabs) {\n        return;\n      }\n\n      var scene = navigationState.children[navigationState.index];\n\n      _Actions.default.focus({\n        scene: scene\n      });\n    }\n  }, {\n    key: \"chooseInterpolator\",\n    value: function chooseInterpolator(direction, props) {\n      switch (direction) {\n        case 'vertical':\n          return NavigationCardStackStyleInterpolator.forVertical(props);\n\n        case 'fade':\n          return fadeInScene(props);\n\n        case 'leftToRight':\n          return leftToRight(props);\n\n        default:\n          return NavigationCardStackStyleInterpolator.forHorizontal(props);\n      }\n    }\n  }, {\n    key: \"renderScene\",\n    value: function renderScene(props) {\n      return _react.default.createElement(DefaultRenderer, {\n        key: props.scene.navigationState.key,\n        onNavigate: props.onNavigate,\n        navigationState: props.scene.navigationState,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader(props) {\n      var state = props.navigationState;\n      var child = state.children[state.index];\n      var selected = state.children[state.index];\n\n      while ({}.hasOwnProperty.call(selected, 'children')) {\n        selected = selected.children[selected.index];\n      }\n\n      if (child !== selected) {\n        return null;\n      }\n\n      var hideNavBar = (0, _Util.deepestExplicitValueForKey)(state, 'hideNavBar');\n\n      if (hideNavBar) {\n        return null;\n      }\n\n      if (selected.component && selected.component.renderNavigationBar) {\n        return selected.component.renderNavigationBar(_objectSpread({}, props, {}, selected));\n      }\n\n      var HeaderComponent = selected.navBar || child.navBar || state.navBar || _NavBar.default;\n\n      var navBarProps = _objectSpread({}, state, {}, child, {}, selected);\n\n      if (selected.component && selected.component.onRight) {\n        navBarProps.onRight = selected.component.onRight;\n      }\n\n      if (selected.component && selected.component.onLeft) {\n        navBarProps.onLeft = selected.component.onLeft;\n      }\n\n      if ((navBarProps.leftTitle || navBarProps.leftButtonImage) && navBarProps.onLeft) {\n        delete navBarProps.leftButton;\n      }\n\n      if ((navBarProps.rightTitle || navBarProps.rightButtonImage) && navBarProps.onRight) {\n        delete navBarProps.rightButton;\n      }\n\n      if (navBarProps.rightButton) {\n        delete navBarProps.rightTitle;\n        delete navBarProps.onRight;\n        delete navBarProps.rightButtonImage;\n      }\n\n      if (navBarProps.leftButton) {\n        delete navBarProps.leftTitle;\n        delete navBarProps.onLeft;\n        delete navBarProps.leftButtonImage;\n      }\n\n      delete navBarProps.style;\n\n      var getTitle = selected.getTitle || function (opts) {\n        return opts.title;\n      };\n\n      return _react.default.createElement(HeaderComponent, (0, _extends2.default)({}, props, navBarProps, {\n        getTitle: getTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 12\n        }\n      }));\n    }\n  }, {\n    key: \"renderCard\",\n    value: function renderCard(props) {\n      var _props$scene$navigati = props.scene.navigationState,\n          key = _props$scene$navigati.key,\n          direction = _props$scene$navigati.direction,\n          animation = _props$scene$navigati.animation,\n          getSceneStyle = _props$scene$navigati.getSceneStyle,\n          getPanHandlers = _props$scene$navigati.getPanHandlers;\n      var state = props.navigationState;\n      var child = state.children[state.index];\n      var selected = state.children[state.index];\n\n      while ({}.hasOwnProperty.call(selected, 'children')) {\n        selected = selected.children[selected.index];\n      }\n\n      var _selected = selected,\n          panHandlers = _selected.panHandlers,\n          animationStyle = _selected.animationStyle;\n      var isActive = child === selected;\n      var computedProps = {\n        isActive: isActive\n      };\n\n      if (isActive) {\n        computedProps.hideNavBar = (0, _Util.deepestExplicitValueForKey)(props.navigationState, 'hideNavBar');\n        computedProps.hideTabBar = (0, _Util.deepestExplicitValueForKey)(props.navigationState, 'hideTabBar');\n      }\n\n      var style = getSceneStyle ? getSceneStyle(props, computedProps) : null;\n      var animType = animation && !direction ? animation : direction;\n\n      if (typeof animationStyle === 'undefined') {\n        animationStyle = DefaultRenderer.chooseInterpolator(animType, props);\n      }\n\n      if (typeof animationStyle === 'function') {\n        animationStyle = animationStyle(props);\n      }\n\n      if (typeof panHandlers === 'undefined') {\n        panHandlers = getPanHandlers ? getPanHandlers(props, direction) : DefaultRenderer.getPanHandlers(direction, props);\n      }\n\n      return _react.default.createElement(NavigationCard, (0, _extends2.default)({}, props, {\n        key: \"card_\" + key,\n        style: [animationStyle, style],\n        panHandlers: panHandlers,\n        renderScene: DefaultRenderer.renderScene,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  function DefaultRenderer(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DefaultRenderer);\n    _this = _super.call(this, props);\n    _this.shouldComponentUpdate = _reactAddonsPureRenderMixin.default.shouldComponentUpdate.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(DefaultRenderer, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        navigationState: this.props.navigationState\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      DefaultRenderer.dispatchFocusAction(this.props);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.navigationState !== this.props.navigationState) {\n        DefaultRenderer.dispatchFocusAction(nextProps);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          navigationState = _this$props.navigationState,\n          onNavigate = _this$props.onNavigate;\n\n      if (!navigationState || !onNavigate) {\n        console.error('navigationState and onNavigate property should be not null');\n        return null;\n      }\n\n      var SceneComponent = navigationState.component;\n\n      if (navigationState.tabs && !SceneComponent) {\n        SceneComponent = _TabBar.default;\n      }\n\n      if (SceneComponent) {\n        return _react.default.createElement(_reactNative.View, {\n          style: [styles.sceneStyle, navigationState.sceneStyle],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 9\n          }\n        }, _react.default.createElement(SceneComponent, (0, _extends2.default)({}, this.props, navigationState, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 11\n          }\n        })));\n      }\n\n      var optionals = {};\n      var selected = navigationState.children[navigationState.index];\n      var applyAnimation = selected.applyAnimation || navigationState.applyAnimation;\n      var style = selected.style || navigationState.style;\n\n      if (applyAnimation) {\n        optionals.applyAnimation = applyAnimation;\n      } else {\n        var duration = selected.duration;\n        if (duration === null || duration === undefined) duration = navigationState.duration;\n\n        if (duration !== null && duration !== undefined) {\n          optionals.applyAnimation = function (pos, navState) {\n            if (duration === 0) {\n              pos.setValue(navState.index);\n            } else {\n              _reactNative.Animated.timing(pos, {\n                toValue: navState.index,\n                duration: duration\n              }).start();\n            }\n          };\n        }\n      }\n\n      return _react.default.createElement(NavigationAnimatedView, (0, _extends2.default)({\n        navigationState: navigationState,\n        style: [styles.animatedView, style],\n        renderOverlay: DefaultRenderer.renderHeader,\n        renderScene: DefaultRenderer.renderCard\n      }, optionals, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n  return DefaultRenderer;\n}(_react.Component);\n\nexports.default = DefaultRenderer;\nDefaultRenderer.propTypes = {\n  navigationState: _react.PropTypes.object,\n  onNavigate: _react.PropTypes.func\n};\nDefaultRenderer.childContextTypes = {\n  navigationState: _react.PropTypes.any\n};","map":{"version":3,"sources":["/Users/apple/Documents/janitri/sampleapp/node_modules/react-native-router-flux/src/DefaultRenderer.js"],"names":["SCREEN_WIDTH","Dimensions","get","width","NavigationAnimatedView","NavigationExperimental","AnimatedView","NavigationCard","Card","NavigationCardStackPanResponder","CardStackPanResponder","NavigationCardStackStyleInterpolator","CardStackStyleInterpolator","styles","StyleSheet","create","animatedView","flex","backgroundColor","sceneStyle","fadeInScene","props","position","scene","index","inputRange","opacity","interpolate","outputRange","scale","translateY","translateX","transform","leftToRight","DefaultRenderer","direction","forVertical","forHorizontal","navigationState","component","tabs","children","Actions","focus","key","onNavigate","state","child","selected","hasOwnProperty","call","hideNavBar","renderNavigationBar","HeaderComponent","navBar","NavBar","navBarProps","onRight","onLeft","leftTitle","leftButtonImage","leftButton","rightTitle","rightButtonImage","rightButton","style","getTitle","opts","title","animation","getSceneStyle","getPanHandlers","panHandlers","animationStyle","isActive","computedProps","hideTabBar","animType","chooseInterpolator","renderScene","shouldComponentUpdate","PureRenderMixin","bind","dispatchFocusAction","nextProps","console","error","SceneComponent","TabBar","optionals","applyAnimation","duration","undefined","pos","navState","setValue","Animated","timing","toValue","start","renderHeader","renderCard","Component","propTypes","PropTypes","object","func","childContextTypes","any"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Pavel Aksonov\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport React, {\n  Component,\n  PropTypes,\n} from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  Dimensions,\n} from 'react-native';\nimport NavigationExperimental from 'react-native-experimental-navigation';\nimport PureRenderMixin from 'react-addons-pure-render-mixin';\n\nimport TabBar from './TabBar';\nimport NavBar from './NavBar';\nimport Actions from './Actions';\nimport { deepestExplicitValueForKey } from './Util';\n\nconst SCREEN_WIDTH = Dimensions.get('window').width;\n\nconst {\n  AnimatedView: NavigationAnimatedView,\n  Card: NavigationCard,\n} = NavigationExperimental;\n\nconst {\n  CardStackPanResponder: NavigationCardStackPanResponder,\n  CardStackStyleInterpolator: NavigationCardStackStyleInterpolator,\n} = NavigationCard;\n\nconst styles = StyleSheet.create({\n  animatedView: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n  sceneStyle: {\n    flex: 1,\n  },\n});\n\nfunction fadeInScene(/* NavigationSceneRendererProps */ props) {\n  const {\n    position,\n    scene,\n  } = props;\n\n  const index = scene.index;\n  const inputRange = [index - 1, index, index + 1];\n\n  const opacity = position.interpolate({\n    inputRange,\n    outputRange: [0, 1, 0.3],\n  });\n\n  const scale = position.interpolate({\n    inputRange,\n    outputRange: [1, 1, 0.95],\n  });\n\n  const translateY = 0;\n  const translateX = 0;\n\n  return {\n    opacity,\n    transform: [\n      { scale },\n      { translateX },\n      { translateY },\n    ],\n  };\n}\n\nfunction leftToRight(/* NavigationSceneRendererProps */ props) {\n  const {\n    position,\n    scene,\n  } = props;\n\n  const index = scene.index;\n  const inputRange = [index - 1, index, index + 1];\n\n  const translateX = position.interpolate({\n    inputRange,\n    outputRange: [-SCREEN_WIDTH, 0, 0],\n  });\n\n  return {\n    transform: [\n      { translateX },\n    ],\n  };\n}\n\nexport default class DefaultRenderer extends Component {\n\n  static propTypes = {\n    navigationState: PropTypes.object,\n    onNavigate: PropTypes.func,\n  };\n\n  static childContextTypes = {\n    navigationState: PropTypes.any,\n  };\n\n  static getPanHandlers(direction, props) {\n    return direction === 'vertical' ?\n      NavigationCardStackPanResponder.forVertical(props) :\n      NavigationCardStackPanResponder.forHorizontal(props);\n  }\n\n  static dispatchFocusAction({ navigationState }) {\n    if (!navigationState || navigationState.component || navigationState.tabs) {\n      return;\n    }\n    const scene = navigationState.children[navigationState.index];\n    Actions.focus({ scene });\n  }\n\n  static chooseInterpolator(direction, props) {\n    switch (direction) {\n      case 'vertical':\n        return NavigationCardStackStyleInterpolator.forVertical(props);\n      case 'fade':\n        return fadeInScene(props);\n      case 'leftToRight':\n        return leftToRight(props);\n      default:\n        return NavigationCardStackStyleInterpolator.forHorizontal(props);\n    }\n  }\n\n  static renderScene(/* NavigationSceneRendererProps */ props) {\n    return (\n      <DefaultRenderer\n        key={props.scene.navigationState.key}\n        onNavigate={props.onNavigate}\n        navigationState={props.scene.navigationState}\n      />\n    );\n  }\n\n  static renderHeader(/* NavigationSceneRendererProps */ props) {\n    const state = props.navigationState;\n    const child = state.children[state.index];\n    let selected = state.children[state.index];\n    while ({}.hasOwnProperty.call(selected, 'children')) {\n      selected = selected.children[selected.index];\n    }\n    if (child !== selected) {\n      // console.log(`SKIPPING renderHeader because ${child.key} !== ${selected.key}`);\n      return null;\n    }\n    const hideNavBar = deepestExplicitValueForKey(state, 'hideNavBar');\n    if (hideNavBar) {\n      // console.log(`SKIPPING renderHeader because ${child.key} hideNavBar === true`);\n      return null;\n    }\n\n    // console.log(`renderHeader for ${child.key}`);\n\n    if (selected.component && selected.component.renderNavigationBar) {\n      return selected.component.renderNavigationBar({ ...props, ...selected });\n    }\n\n    const HeaderComponent = selected.navBar || child.navBar || state.navBar || NavBar;\n    const navBarProps = { ...state, ...child, ...selected };\n\n    if (selected.component && selected.component.onRight) {\n      navBarProps.onRight = selected.component.onRight;\n    }\n\n    if (selected.component && selected.component.onLeft) {\n      navBarProps.onLeft = selected.component.onLeft;\n    }\n\n    if ((navBarProps.leftTitle || navBarProps.leftButtonImage) && navBarProps.onLeft) {\n      delete navBarProps.leftButton;\n    }\n\n    if ((navBarProps.rightTitle || navBarProps.rightButtonImage) && navBarProps.onRight) {\n      delete navBarProps.rightButton;\n    }\n\n    if (navBarProps.rightButton) {\n      delete navBarProps.rightTitle;\n      delete navBarProps.onRight;\n      delete navBarProps.rightButtonImage;\n    }\n\n    if (navBarProps.leftButton) {\n      delete navBarProps.leftTitle;\n      delete navBarProps.onLeft;\n      delete navBarProps.leftButtonImage;\n    }\n    delete navBarProps.style;\n\n    const getTitle = selected.getTitle || (opts => opts.title);\n    return <HeaderComponent {...props} {...navBarProps} getTitle={getTitle} />;\n  }\n\n  static renderCard(/* NavigationSceneRendererProps */ props) {\n    const { key,\n      direction,\n      animation,\n      getSceneStyle,\n      getPanHandlers,\n    } = props.scene.navigationState;\n\n    const state = props.navigationState;\n    const child = state.children[state.index];\n    let selected = state.children[state.index];\n    while ({}.hasOwnProperty.call(selected, 'children')) {\n      selected = selected.children[selected.index];\n    }\n    let { panHandlers, animationStyle } = selected;\n    const isActive = child === selected;\n    const computedProps = { isActive };\n    if (isActive) {\n      computedProps.hideNavBar = deepestExplicitValueForKey(props.navigationState, 'hideNavBar');\n      computedProps.hideTabBar = deepestExplicitValueForKey(props.navigationState, 'hideTabBar');\n    }\n\n    const style = getSceneStyle ? getSceneStyle(props, computedProps) : null;\n\n    // direction overrides animation if both are supplied\n    const animType = (animation && !direction) ? animation : direction;\n\n    if (typeof (animationStyle) === 'undefined') {\n      animationStyle = DefaultRenderer.chooseInterpolator(animType, props);\n    }\n\n    if (typeof (animationStyle) === 'function') {\n      animationStyle = animationStyle(props);\n    }\n\n    if (typeof (panHandlers) === 'undefined') {\n      panHandlers = getPanHandlers ?\n        getPanHandlers(props, direction) :\n        DefaultRenderer.getPanHandlers(direction, props);\n    }\n    return (\n      <NavigationCard\n        {...props}\n        key={`card_${key}`}\n        style={[animationStyle, style]}\n        panHandlers={panHandlers}\n        renderScene={DefaultRenderer.renderScene}\n      />\n    );\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);\n  }\n\n  getChildContext() {\n    return {\n      navigationState: this.props.navigationState,\n    };\n  }\n\n  componentDidMount() {\n    DefaultRenderer.dispatchFocusAction(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.navigationState !== this.props.navigationState) {\n      DefaultRenderer.dispatchFocusAction(nextProps);\n    }\n  }\n\n  render() {\n    const { navigationState, onNavigate } = this.props;\n\n    if (!navigationState || !onNavigate) {\n      console.error('navigationState and onNavigate property should be not null');\n      return null;\n    }\n\n    let SceneComponent = navigationState.component;\n\n    if (navigationState.tabs && !SceneComponent) {\n      SceneComponent = TabBar;\n    }\n\n    if (SceneComponent) {\n      return (\n        <View\n          style={[styles.sceneStyle, navigationState.sceneStyle]}\n        >\n          <SceneComponent {...this.props} {...navigationState} />\n        </View>\n      );\n    }\n\n    const optionals = {};\n    const selected = navigationState.children[navigationState.index];\n    const applyAnimation = selected.applyAnimation || navigationState.applyAnimation;\n    const style = selected.style || navigationState.style;\n\n    if (applyAnimation) {\n      optionals.applyAnimation = applyAnimation;\n    } else {\n      let duration = selected.duration;\n      if (duration === null || duration === undefined) duration = navigationState.duration;\n      if (duration !== null && duration !== undefined) {\n        optionals.applyAnimation = (pos, navState) => {\n          if (duration === 0) {\n            pos.setValue(navState.index);\n          } else {\n            Animated.timing(pos, { toValue: navState.index, duration }).start();\n          }\n        };\n      }\n    }\n\n    // console.log(`NavigationAnimatedView for ${navigationState.key}`);\n\n    return (\n      <NavigationAnimatedView\n        navigationState={navigationState}\n        style={[styles.animatedView, style]}\n        renderOverlay={DefaultRenderer.renderHeader}\n        renderScene={DefaultRenderer.renderCard}\n        {...optionals}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}